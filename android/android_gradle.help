COMMANDS
========

-- To run your tests with the Gradle Wrapper:
   $ ./gradlew build connectedCheck

-- To build a debug version
   $ gradlew assembleDebug

-- To build a release version:
   $ gradlew assembleRelease

-- To install the application in a device
   $ adb install build/outputs/apk/users_cl_trash-debug.apk

-- To get the high level tasks:
   $ gradle tasks

-- To get all the tasks:
   $ gradle tasks --all

-- To build a debug APK
   $ gradle assembleDebug

-- To build a release APK
   $ gradle assembleRelease

-- To build the test app independently:
   $  gradle assembleDebugAndroidTest,  gradle assembleAndroidTest

-- To run the tests on a connected emulator or device:
   $  ./gradlew connectedDebugAndroidTest , ./gradlew connectedAndroidTest

-- To run your tests with the Gradle Wrapper in a connected device:
   $ ./gradlew build connectedCheck

-- From the root folder, the following command line will run all the tests and aggregate the reports:
   $ gradle deviceCheck mergeAndroidReports  --continue   // deviceCheck puede ser otra tarea.

   To do that we need a plugin in the build.gradle of the root project, at the end of it:
   apply plugin: 'android-reporting'

-- To generate useful information about the build, in HTML form to the build/reports/profile directory:
   $ ./gradlew --profile assembleDebug

DEPENDENCIES
============

-- To see the transitive dependencies in a project with the android plugin:
   $ ./gradlew androidDependencies

-- To add a set of files to a configuration without adding them to a repository:

   dependencies {
         compile files('libs/a.jar', 'libs/b.jar')
         compile fileTree(dir: 'libs', include: '*.jar')
   }

-- If you have files on the local filesystem, you can use a directory as a repository with the flatDir syntax:

   repositories {
       flatDir {
            dirs 'lib'
       }
   }

-- To turn transitive inclusions off for a particular library (retrofit2), use the transitive flag:

   dependencies {
         runtime group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.0.1', transitive: false
    }

-- You can also exclude an specific transitive dependency:

   dependencies {
      androidTestCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
            exclude group: 'org.codehaus.groovy'
            exclude group: 'junit'
      }
   }

-- If you only want a module jar, without any additional dependencies, you can specify that as well:

   dependencies {
       compile 'org.codehaus.groovy:groovy-all:2.4.4@jar'
   }
   Or:
   dependencies {
        compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.4', ext: 'jar'
   }

-- To force the resolution of a dependency to a particular version of a library, in the build.gradle of the
   root project:

   allprojects {
       repositories {
           jcenter()
       }
       configurations.all {
           resolutionStrategy.force
                'com.android.support:support-annotations:23.3.0'
       }
   }

BUILD TIPS
==========
--  Define an optimized product flavour for the development version:

    productFlavors {
        development{
            minSdkVersion 21  // To avoid legacy multidex.
            resConfigs ("es", "xxhdpi")  // To avoid all the resources needed in production.
            ...
        }
    }


BUILD VARIANTS
==============

-- If different source sets contain different versions of the same FILE, Gradle uses the following priority order
   when deciding which file to use :
   1. build variant > 2. build type > 3. product flavor > 4. main source set > 5. library dependencies

BUILDCONFIG

-- To use an URL in a string buildconfig variable:
   - buildConfigField "String", "SERVER_URL", "\"http://dev.myserver.com\""
   Or:
   - buildConfigField "String", 'SERVER_URL', '"http://dev.myserver.com"'
   - buildConfigField "String", 'APP_VERSION', '"0.0.1"'

MAIN (source set)

-- A moduleâ€™s main/ source set includes the code and resources used by all its build variants.


DEBUG (build variant)

-- By default, all tests run against the debug build type. You can change this to another build type by using
   the testBuildType property in your module-level build.gradle file:

   android {
       ...
       testBuildType "staging"     // staging buildType instead of debug.
   }

-- The debug build is automatically signed with a debug key provided by the SDK tools. You can also define a custom
   build type in your build.gradle file and configure it to be signed as a debug build by including 'debuggable true'.

ANDROID TEST (source set)

-- The instrumented tests in src/androidTest/ source set are shared by all build variants.

TEST (source set)


RELEASE (build variant)

-- By default, the library module publishes and exposes only the "release" build variant to other Android projects and modules.
   To tell Gradle to build all variants of the library module:

   android {
     publishNonDefault true
   }




