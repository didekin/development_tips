BACK-END
========

--- CommandLineRunner (útil para ejecución de tareas en backend).

    If the application class implements Spring Boot’s CommandLineRunner, then
    it will execute the run() method after the application context is
    loaded up.

    public class SampleSecureApplication implements CommandLineRunner {

    	@Autowired
    	private SampleService service;

    	@Override
    	public void run(String... args) throws Exception {
    		SecurityContextHolder.getContext().setAuthentication(
    				new UsernamePasswordAuthenticationToken("user", "N/A", AuthorityUtils
    						.commaSeparatedStringToAuthorityList("ROLE_USER")));
    		try {
    			System.out.println(this.service.secure());
    		}
    		finally {
    			SecurityContextHolder.clearContext();
    		}
    	}

    	public static void main(String[] args) throws Exception {
    		SpringApplication.run(SampleSecureApplication.class, "--debug");
    	}
    }


WEB
===

--- AbstractAnnotationConfigDispatcherServletInitializer

    After AbstractAnnotationConfigDispatcherServletInitializer registers
    DispatcherServlet with the servlet container, it calls the
    customizeRegistration() method, passing in the Servlet- Registration.Dynamic
    that resulted from the servlet registration. By overriding
    customizeRegistration(), you can apply additional configuration to
    DispatcherServlet.

    With the ServletRegistration.Dynamic that’s given to customizeRegistration(),
    you can do several things, including set the load-on-startup priority by
    calling setLoadOnStartup(), set an initialization parameter by calling
    setInitParameter(), and call setMultipartConfig() to configure Servlet 3.0
    multipart support.

    @Override
    protected void customizeRegistration(Dynamic registration)
    {
        registration.setMultipartConfig(new MultipartConfigElement("tmp/uploads"));
    }

    To register one or more filters and map them to DispatcherServlet, all you
    need to do is override the getServletFilters() method.

    @Override
    protected Filter[] getServletFilters() {
      return new Filter[] { new MyFilter() };
    }

    There’s no need to declare the mapping for the filters; any filter returned
    from getServletFilters() will automatically be mapped to DispatcherServlet.

--- WebApplicationInitializer

    If you need to register any additional components into the web container,
    you need only create a new initializer class. The easiest way to do this
    is by implementing Spring’s WebApplicationInitializer interface.

    public class MyServletInitializer implements WebApplicationInitializer {
    }
        @Override
        public void onStartup(ServletContext servletContext)
                        throws ServletException
        {
           Dynamic myServlet = servletContext.addServlet("myServlet",
                MyServlet.class);
           myServlet.addMapping("/custom/**");
        }


        @Override
        public void onStartup(ServletContext servletContext)
               throws ServletException
        {
          javax.servlet.FilterRegistration.Dynamic filter =
                        servletContext.addFilter("myFilter", MyFilter.class);
          filter.addMappingForUrlPatterns(null, false, "/custom/*");
        }
    }

SECURITY
========


