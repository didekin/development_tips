Un module est donc un objet python qui correspond à la fois à :
--  Un (seul) fichier sur le disque ;
--  Un espace de nom pour les variables du programme.

--  The statements executed by the top-level invocation of the interpreter, either read from a script file or interactively,
    are considered part of a module called __main__, so they have their own global namespace.

IMPORT
======

--  To  import a module:
    > import math
    > import monmodule as autremodule   // changing the name of the module
    > from monmodule import monsymbole as autresymbole   // changing the name of a module attribute.
    > from un_deux_trois_quatre import un as one, deux, trois as three  // resultant names = one(), deux(), three()
    > import foo // définit une variable 'foo' qui désigne un module.
    > import foo as bar   //  a le même effet, sauf que le module est accessible par la variable 'bar'.
    > from foo import var // définit une variable 'var' qui désigne un attribut du module.
    > from foo import var as newvar  // définit une variable newvar qui désigne ce même attribut.

    > from importlib import import_module
    > imported_modtools = import_module('mod' + 'tools')  // Ces deux lignes sont equivalentes à :
    > import modtools

--  To see the functions in a module
    > dir(math)

IMPORT RELATIVE

--  On peut "remonter" dans l'arborescence de fichiers en utilisant plusieurs points '.' consécutifs.
    > from . import randomi as local_random_module  // import whole module randomi in current directory (package directory).
    > from .randomi import alea as imported  // randomi is in the same directory. 'alea' is a function inside local module randomi.
    > from ..randomi import alea as imported  // randomi is one level up the current directory.
--  Lors d'un import relatif, c'est l'attribut '__name__' qui sert à déterminer le point de départ.
    Par contre l'attribut '__file__' n'est pas utilisé.
    Le point d'entrée (module/file qui est donné à python sur la ligne de commande) voit comme valeur pour '__name__' la constante "__main__",
    et le mécanisme d'import relatif se base sur '__name__' pour localiser les modules importés:
    ---> il n'est quasiment pas possible d'utiliser les imports relatifs à partir du script de lancement.

BUILTINS
========

--  Module directly accesible: 'builtins'
    > import builtins
    > dir(builtins)
    --  After changing the definition of a builtin function/variable, to reestablish its original meaning:
        > print = builtins.print   // after print = 1, p.e.

--  La variable 'sys.builtin_module_names' contient le nom des modules qui sont implémentés en C et font partie intégrante de l'interpréteur.

LOCAL SCOPE
===========

--  To see the current scope's local variables in a dictionary data structure:
        > locals()
--  To delete variable in the current scope's local variables:
        > if 'i' in locals():
                del i
--  Une variable de boucle est définie (assignée) dans la boucle et reste visible une fois la boucle terminée.
--  Les variables de compréhension ne fuient pas.
--  Les arguments attendus par la fonction sont considérés comme des variables locales, c'est-à-dire dans l'espace de noms de la fonction.

GLOBAL VARIABLES
================

--  Comment fait-on alors pour modifier une variable globale depuis une fonction APRÈS l'avoir utilisée? Pour cela il faut utiliser l'instruction global:
    > variable5 = "globale"
      def ma_fonction5():
          global variable5
          print("dans la fonction", variable5)  // print 'globale'
          variable5 = "changée localement"

    No need to use 'globale' here because it has not been previously used:
    > variable4 = "globale"
      def ma_fonction4():
            variable4 = "locale"
            print(variable4)  // print 'locale'

--  La fonction 'globals' nous donne la liste des symboles définis au niveau de l'espace de noms du module dans lequel est définie la fonction.
    > globals() // inside the module.
--  The function vars() when executed inside a module is similar to globals.
--  The function vars(moduleName) is similar to globals(), but it is executed outside of the module (when imported).
--  La fonction 'locals' nous donne les variables locales qui sont accessibles à cet "endroit" du code.

RELOAD
======

--  Module importlib, fonction 'reload': elle permet de forcer le rechargement d'un module.
--  Il est possible de forcer le rechargement d'un module en l'enlevant de la variable 'sys.modules' (it is a dictionnary).

--  Pour charger vos propres modules ou packages, il suffit de les placer dans le répertoire où se trouve le point d'entrée:
    > from pathlib import Path
      Path.cwd()  // pour savoir le répertoire courant.