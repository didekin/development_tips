CLASS CREATION
--------------

--  To define an empty class:
    > class Foo:
          pass

    > class DerivedClassName(modulename.BaseClassName):
          pass

FACTORIES

--  To define a class from function. Hereafter a new class Tuple point is created with the func. namedTuple:
    > TuplePoint = namedtuple('TuplePoint', ['x', 'y'])  // TuplePoint is a tuple. See namedtuple in collections package.

DATA CLASSES (package dataclass)

    > @dataclass
        class Personne:
            nom: str
            age: int
            email: str = ""

    > Personne(nom='jean', age=12) // Instantiation

--  To overload the default implementation of a method [repr() in this case]
    > @dataclass(repr=False)  // and the method is defined inside the class.



CLASSES DEFINITION
------------------

--  Overloading: see '3. Data model' in  The Python Language Reference; specially 3.3. Special method names.

--   To have (simple) index access to an object with len(myobj) > 0, it is necessary to overwrite __getitem__:
     > def index_getitem(self, index):
            ....
     > Myobj.__getitem__ = index_getitem

--  To have slicing in an object:
    > def slice_getitem(self, key):
        if isinstance(key, slice):
            return [self[index] for index in range(*key.indices(len(self)))]
        elif isinstance(key, int):
            index = key
        else:
            raise KeyError(f"[] avec type non reconnu {key}")
    > Myobj.__getitem__ = slicing_getitem

    Avec seulement __getitem__, on peut faire une boucle sur l'objet.
    La méthode __iter__ n'est pas la seule façon de rendre un objet itérable.

--  To have an object 'callable':
    > myobjet = ClasseMyobj(arguments)
    > myobjet(arg1, arg2) ⟺ myobjet.__call__(arg1, arg2)
    Where we overwrite '__call__':
    >   def __call__(self, *args):
          ...

INFORMATION HIDING

--  When the name of an attribute starts with __ (double underscore) but does not end with __, that attribute is not visible outside the class.

GENERATORS
==========

--  > generator1 = (x**2 for x in range(100) if x%17 == 0)

--  Fonction generatrice: 'yield'
    > def f1(n, verbose=False):
            for i in range(2, n):
            if n % i == 0:
                yield i

--  Fonction génératrice qui appelle une autre fonction génératrice: 'yield from'
    > def f2(n):
          for i in f1(n):
              yield from f1(i, verbose=True)

OBJECTS
-------

--  To call a method in a parent class, two forms:
    > super().methodInparent()
    > ParentNameClass.methodInparent(self)

--  To know the type of an object:
    > type(object)
    > isinstance(23,int)
    > isinstance(myarg, type|tuple of types|list of types)
--  L'opérateur 'is' permet de savoir si deux valeurs correspondent au même objet en mémoire.
    > a is b
    La fonction id() retourne un identificateur unique pour chaque objet; un modèle mental acceptable est celui d'adresse mémoire.
    (a is b)  ⟺  (id(a) == id(b))


OPERATORS
---------

--  When an operator is applied to operands of different types, the first argument of the expression is used to determine which method to invoke.
    If the second object has not in its type hierarchy the class with that method, an exception is thrown.

VARIABLES
---------

--  Pour annuler la définition d'une variable:
    > del varname
    > del listname[2:10:3]  // liste
    > del d['a']  // dictionnaire
    > del listname[2:10:3], d['a']  // plusieurs arguments

--  Multiple assignment:
    > x, y = 2, 3
    > x, y = y, x
--  Pour affecter le même objet à plusieurs variables:
    > a = b= 'hola'
--  La sémantique de '+=' est différente suivant que l'objet référencé par le terme de gauche est mutable ou immuable.
    > a = b = [] // a += [1]  // print(a) --> [1], print(b) --> [1]
    > a = b = 1  // a += 1  // print(a) --> 2, print(b) --> 1

