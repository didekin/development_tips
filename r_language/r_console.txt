--  To leave R console.
    > quit()
    > q()

--  To measure the execution time of a function or expression:
    > system.time(function)
    > system.time({ code })

DATES
=====

--  To convert from the format month/day/year hh:mm:
    > dateConvert <- as.Date(strptime(mvt$Date,"%m/%d/%y %H:%M"))

--  To extract month and weekday:
    > months(dateConvert)
    > weekdays(dateConvert)

EDITION
=======
--  To see previous commands
    > Ctrl + Up

--  To make an assignment and “print to screen” the result: surround the assignment with parentheses.
    > (y <- seq(1, 10, length.out = 5))

--  To be explicit about where a function (or dataset) comes from:
    > packageName::functionName()
    
Shorcuts
--------
--  RStudio’s completion facility: press TAB
--  To see shorcuts: 
    > Alt + Shift + K
--  To write <- :
    > Alt + -
--  Shortcut for pipe symbol: 
    > CMD + SHIFT + M
--  Shortcut to run an entire script file 
    > Ctrl + shif + R
--  Shortcut new script file: 
    > Ctrl + Enter
--  To create a comment header:
    > Cmd+Shift+R

FILES - WORKSPACE
=================

--  To see the global options defined:
    options()
--  Para conocer el directorio actual.
    > getwd()
--  Para cambiar el directorio de trabajo.
    > setwd(mydir)
--  Files utilities:
    > dir()
    > list.files()
    > list.dirs
    > file.exists(name_file)
    > dir.create(....)

--  To  delete files or directories:
    > unlink("filename")

--  To see the variables in the workspace:
    > ls()
--  To remove one variable from the workspace:
    > rm(variableName)
--  Para borrar todas las variables del workspace:
    > rm(list = ls())

FUNCTIONS - LANGUAGE
====================

varFunctionIn <- function(x) {
  do something
}

--  Para ver un ejemplo de utilización de una función:
    > example(functionName)
--  Para ver los argumentos de una función:
    > args(function)
--  Para ver un ejemplo de utilización de una función:
    > example(functionName)

--  Vectorised comparison operators: '==', '|', '&'.
--  Single operators: '||', '&&', any(), all(), identical()
--  To compare floating point numbers:
    > near(---)
--  To check for special values of doubles:
    > is.finite()
    > is.infinite()
    > is.nan()

--  To check invariants and stop the execution with an error message:
    > stop("`x` and `w` must be the same length", call. = FALSE)  
    > stopifnot(---)
--  To express arguments with an arbitrary number of inputs:
    function(...)  # exactly three dots. You can then send those ... on to another function. 
--  To capture the values of the ..., use list(...).

--  Side-effects functions should “invisibly” return the first argument so that they can be piped:
    - use  %T>% instead of %>% after the data frame to be used afterwards and before the 'invisible' instruction.
  
ITERATIONS
----------

--  To create new vectors:
    output <- vector("double", ncol(df))  # 1. output
    for (i in seq_along(df)) {            # 2. sequence
      output[[i]] <- median(df[[i]])      # 3. body
    }
    Or:
    out <- vector("numeric", length(x))
    for (i in 1:length(x)) {
      name <- names(x)[[i]]  # to extract the name
      value <- x[[i]]   # to extract the value
      names(out) <- names(x)  # to reuse the names of the original df
      ...
    }
--  To transform a dataframe df:
    for (i in seq_along(df)) {
        df[[i]] <- rescale01(df[[i]])
    }
    
--  When the number of iterations is not known in advance:
    while (condition) {
       # body
    }

PLOTS
=====

--  Three dimensional plots:
    > contour(x,y,f,nlevels=45,add=T)
    > persp(x,y,fa,theta=30,phi=20)
    
--  To produce scatterplots for just a subset of the variables in a dataframe (mtcars, p.e.):  
    > pairs(∼ mpg + displacement + horsepower + weight + acceleration , mtcars)
--  For all the variables:
    > pairs(mtcars)
--  'identify' provides a useful interactive method for identifying the value for a particular variable for points on a plot. 
    We pass in three arguments to identify(): the x-axis variable, the y-axis variable, and the variable whose values we would 
    like to see printed for each point. Then clicking on a given point in the plot will cause R to print the value of the 
    variable of interest.
    > plot(horsepower ,mpg)
    > identify(horsepower,mpg,name)
    
GGPLOT2

--  When creating ggplot2 graphics,  put the + at the end of the line, not the start

--  Help about aestetics:
    > ?geom_name      //  ?geom_point,?geom_smooth, ..
    > vignette("ggplot2-specs")

--  To set an aesthetic manually, set the aesthetic by name as an argument of your geom function:
    geom_point(mapping = aes(x = displ, y = hwy), color = "blue")  # color is out aes()
--  To define the scale width of a variable:
    count(cut_width(variableName, 0.5))  # 0.5 es la separación entre valores de la escala. 'Count' es la función que la utiliza.
--  To set the width of the intervals in a histogram (¿y en otros tipos de gráfico?):
    geom_histogram(binwidth = 0.1)
--  To zoom to small values of the y-axis:
    geom_histogram(mapping = aes(x = y), binwidth = 0.5) +
    coord_cartesian(ylim = c(0, 50))
--  To reorder the scale values of an axis:
    geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) # reorder of class after hwy median values.
--  To rotate axis, when having long labels in x axis:
    geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
    coord_flip()

HELP
====

--  To obtain help:
    > ?wordTolookFor
    > help.search(word)
    > RSiteSearch("keywords")

MODELS
======

--  To add 'model' residuals to a data frame:
    %>% 
    add_residuals(mod) %>%

PACKAGES
========

--  To install a new package:
    > install.packages("xlsx")
--  To detach a package from the current session:
    > detach("package:packagename")
--  To see packages in a session:
    > sessionInfo()

R-MARKDOWN
==========

--  To run a code chunk in a document:
    > Cmd + Shift + Enter
--  To add a new chunk of code:
    > Cmd + Option + I
--  To produce a complete report containing all text, code, and results:
    > Cmd + Shift + K

website
-------

--  To render all of the pages in the website:
    > rmarkdown::render_site()

STRINGS
=======

--  To see what characters to escape:
    > ?'"'  or > ?"'"

--  To get the length of a text string (i.e. the number of characters in the string):
    > nchar()
    > str_length(vectorStringsName or stringName)
--  To see the raw contents of a string:
    > writeLines(stringName)
    
--  To combine two or more strings:
    > str_c("x", "y", sep = ", ")
--  To concatenate all the strings in a vector in a single string:
    > str_c(c("x", "y", "z"), collapse = ", ")
--  To extrat a substring:
    > str_sub(vectorStrings, init, end)  # str_sub(c("Apple", "Banana", "Pear"), 1, 3) or str_sub("Pear", 1, 3)
--  To transform strings or string vectors:
    > str_to_upper(c("i", "q"), locale = "es")
    > str_to_lower(c("i", "q"), locale = "es")
    > str_to_title("hola pedro", locale= "es")
    > str_sort(vector, locale = "en")
    > str_order(vector, locale = "en")
    > str_trim() removes whitespace from start and end of string.
    > str_squish() also reduces repeated whitespace inside a string.

grep
----

--  To get the elements in a vector that matches a regular expression:
    > grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = TRUE)
--  To get a logical vector with matches in a vector to a regular expression:
    > grepl(pattern, vectorName, ignore.case = FALSE, perl = FALSE)
    > str_detect(xVector, "menu$")
--  To get the position of a regular expression match(es) in a text string x:
    > pos = regexpr('pattern', x) # Returns position of 1st match in a string
    > pos = gregexpr('pattern', x) # Returns positions of every match in a string
--  To extract part of a text string based on position in the text string, where first and last are the locations in the text string,
    usually found by the regexpr() function:
    > keep = substr(x, first, last)
--  To replace part of a text string with some other text:
    > sub('pattern', replacement, input) # Changes only the 1st pattern match per string
    > gsub('pattern', replacement, input) # Changes every occurrence of a pattern match









