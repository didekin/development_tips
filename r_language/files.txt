MANIPULATE FILES
----------------

--  To  read a file or a connection object:
    > readLines(connection,..)

--  To  count the number of character in a line:
    > nchar(line)

--  Files utilities:
    > dir()
    > list.files()
    > list.dirs
    > file.exists(name_file)
    > dir.create(....)

--  To  delete files or directories:
    > unlink(..)

--  To save and retrieve data in files:
    > dump(c("humidity", "temp","rain"), "weather.R")
    > dump("usefuldata", "useful.R")  // Archiva la definición del objeto usefuldata en el archivo useful.R.
    > source("useful.R")   // Recupera el contenido del archivo useful.R y crea el objeto usefuldata.


LOAD FILES
----------

--  Para cargar los datos que vienen en la distribución estándar de R:
    > library(datasets)
    > data(iris)

--  To download a file:
    > fileUrl <- "https://...."
    > download.file(fileUrl, destfile = "./data/f.csv", method = "curl")

--  To load a CSV file
    > library(readr)
    > titular_old <- read_csv(
        "~/Documents/clientes/leben/demo_dic_2018/data/titular_old.csv",
        col_names = c("titular_id","acumula_num_tx","acumula_ptos","pedido_num_tx","pedido_ptos","fraccion_disp","avg_redencion"),
        col_types = cols(
        titular_id = col_integer(),
        acumula_num_tx = col_integer(),
        acumula_ptos = col_integer(),
        pedido_num_tx = col_integer(),
        pedido_ptos = col_integer(),
        fraccion_disp = col_double(),
        avg_redencion = col_integer()
        )
      )

--  To check the variable names of the loaded file:
    > names(variable)
--  To make the variables in this data frame available by name
    > attach(dataSet)
    OR we must type the data set and the variable name joined with a $ symbol

--  To convert quantitative variables into qualitative variables:
    > newFactoVar = as.factor(oldVar)

--  To load a "flat" file local:
    > read.table("path")

--  To  load an Excel file:
    > library(xlsx)
    > read.xlsx("path",sheetIndex=1,header=TRUE)

--  To  parse a remote XML file:
    > library(XML)
    > fileUrl <- "http://www.w3schools.com/xml/simple.xml"
    > doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
    > rootNode <- xmlRoot(doc)

--  To  parse a remote JSON file:
    > library(jsonlite)
    > jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")

--  To  write a data.frame to a JSON file:
    > myjson <- toJSON(iris, pretty=TRUE)
--  To  convert back to JSON:
    > iris2 <- fromJSON(myjson)

MYSQL
-----

--  To  install package on Mac:
    > install.packages("RMySQL")
--  To  connect to a server and database:
    > conn <- dbConnect(MySQL(), user="pedro", password="pedro", dbname="leben", host="localhost", client.flag=CLIENT_MULTI_RESULTS)
--  To execute a query:
    > sqlQuery <- dbGetQuery(conn, queryTx1Str)
--  To close the connection:
    > dbDisconnect(conn)

--  To see data in a spreadsheet window:
    > View(sqlQuery)
    Or:
    > fix(sqlQuery)
--  To inspect the data:
    > dim(sqlQuery)
    > names(sqlQuery)
    > str(sqlQuery)

--  Pour désigner un objet dans un data frame, ligne x colonne:
    > sqlQuery[2,3]
    > sqlQuery["2", "num_titulares"]

--  To select subsets of rows and columns:
    > sqlQuery[sqlQuery$tx_year == 2010, 2:5]



