DATA SETS
=========

--  To create a vector with repeated values from another vector:
    > c("a","b")[c(1,2,1,2,1,1)]
    [1] "a" "b" "a" "b" "a" "a"

--  Para definir un índice negativo, se define un vector -c(..) con las posiciones a excluir.

--  To create a matrix:
    > A = matrix(1:10,nr=5,nc=2)

--  To create a multidimensional array:
    > B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))

--  To get the number of rows or columns:
    > nrow(dataset), ncol(dataset)
    Para dataframes y vectores, también: NCOL y NROW.

The operator '[' can be used to extract elements of a list or
vector:

--  To extract the second element of the 2-vector-element which # compose the list where sappy is applied:
    > sapply(strsplit(x, split = "_"), "[", 2)
    Similar to:
    >  library(stringr)
    > str_split_fixed(x, "_", 2)[, 2]

NA
--
--  To filter rows with NA values:
    > dataset[complete.cases(dataset),]

--  To filter rows with NA values in certain columns:
    > dataset[complete.cases(dataset[,i:j]),]

--  To know the NA values in a column:
    > sum(is.na(pid$WKHP))
    Or to know if there is NA values in a column:
    > any(is.na(pid$WKHP))
--  To know the number of NA occurrences in each column of a data set:
    > colSums(is.na(pid))
--  To validate the existence of NA values in the data set.
    > all(colSums(is.na(pid)) ==0)

    More on calculating NA values in a column, in tabular form:
    > pid$isNaJWMNP <- ifelse(is.na(pid$JWMNP),TRUE,FALSE)
    > table(pid$isNaJWMNP,is.na(pid$JWMNP))

--  To validate the full set of values of a column:
    > all(pid$WKHP > 0)

--  To sort puttind NA values at the end of the vector:
    > sort(x$var2,na.last=T)

--  To select rows with a logical conditions and to avoid NA values:
    > x[which(x$var2 >=9),]

