CONTINGENCY TABLES
====================================

--  To crosstabs two variables, dropping empty categories:
    > table(droplevels(clusters_regr1_data$k3), droplevels(clusters_regr1_data$subcanal)) # absolute values
    > prop.table(mytable)       # cell percentages
    > prop.table(mytable, 1)    # row percentages
    > prop.table(mytable, 2)    # column percentages
    Variantes: ftable, xtabs.

DATA PREPARATION and EXPLORATION
====================================

--  To standardize the data so that all variables are given a mean of zero and a standard deviation of one:
    > scale(dataSetName)

Data frames
-----------

--  To know the different values in a variable
    > length(table(varName))

--  To summarize by some of the explanatory variables:
    > with(dfName,tapply(varToSummarize,list(varName1,varName2),mean))  // summarize (mean, p.e.) one variable for each of
                                                                           the groups defined for the values of another two.
    Similar, but not the same:
    > aggregate(dfName[,c(2,3,5,7)], list(aliasVar1=varName1,alisVar2=varName2),mean)  // mean for the variables 2,3,5,7, for
                                                                                          each of the groups defined by var1 and var2.

--  To cross-tabulate a continuous variable in the categories defined by two factor variables:
    > with(df, tapply(contVar,list(factor1,factor2),mean))

PROBABILITIES
====================================

--  To calculate a binomial coefficient:
    > choose(40,5)
--  Normal distribution:
    > dnorm(...)     // density.
    > pnorm(...)     // accumulative. 'pnorm' gives the probability of getting a value less than the value specified.
    > qnorm(...)     // 'quantiles of the normal distribution'
    If we want to provide values of the normal deviate and work out probabilities, we use pnorm; if we want to provide probabilities
    and work out values of the normal deviate, we use qnorm.

Plots
-----

--  To draw a normal curve with equally distributed values in [-4,4]:
    > curve(dnorm(x), from=-4, to=4)
--  To plot a range of values of a normal distribution:
    > ht <- seq(lowRange,hightRange,0.01)
    > plot(ht,dnorm(ht,mean,sd),type="l",col="brown", ylab="Probability density",xlab="Height")
--  To draw a binomial distribution in a histogram:
    > plot(x <- 0:50,dbinom(x,size=100,prob=.33),type="h")

Tests
-----

--  To test normality:
    > qqnorm(valuesToTest)  // If the sample is normally distributed then the line will be straight.
    > qqline(valuesToTest)  // To check against the straight line.


REGRESSION
====================================

--  To fit a model:
    > regressionObj <- lm(paginas_mes ~ visitas_mes, data = df_name)
--  To see the coefficients:
    > coeff(regressionObj)
--  To see the statistics estimated:
    > names(regressionObj)
--  To know the coding R uses for the dummy variables:
    > contrasts(regr1_final$subcanal)
--  To avoid an intercept in the model, drop it with -1:
    >  y ~ x1 - 1
--  To include an interaction term between var1 and var2
    > lm(response∼var1*var2,data=dataFrameName)
--  To add a square term:
    > lm(response∼var1+I(var1^2)
--  To use a fith-order polynomial:
    > lm(response∼poly(var1 ,5)

--  To add 'model' residuals to a data frame:
    > modelr::add_residuals(mod) %>%
--  To compute the residuals or the studentized residuals from a linear regression fit:
    > residuals(regress_obj)
    > rstudent(regress_obj)
    > plot(predict(lm.fit), residuals(lm.fit))
    > plot(predict(lm.fit), rstudent(lm.fit))
--  To obtain a confidence interval for the coefficient estimates:
    > confint(regressionObj)
--  To produce confidence intervals and prediction intervals for the prediction of y for a given value of x:
    > predict(regressionObj,data.frame(x = c(5,10,15)), interval ="confidence")
    > predict(regressionObj,data.frame(x = c(5,10,15)), interval ="prediction")

SAMPLE STATISTICS
====================================

> mean(--)
> var(--)
> sd(--)  # standard deviation
> median(--)
  Or manually: > sorted[ceiling(length(df$varX)/2)]
> quantile(--)
> cor(dfName)  # correlation among columns of a data frame.
> cor(dfName[,-5]) # exclude column 5 (non-numeric values).

Tests
-----

Notes:
++  When the variances are different, don't compare the means.
++  An outlier is a value more than 1.5 times the interquartile range above the third quartile, or below the first quartile.

--  Test for a single sample mean with bootstrap:
    >  meansVector <- numeric(10000)
    >  for(i in 1:10000)  mean[i] <- mean(sample(speed,replace=T))
    >  hist(meansVector)  or max(meansVector)

--  t Student test for a two-tails 0.05 confidence interval:
    > qt(.025, numDegOfFreedom)  // left hand tail.
    > qt(.975, numDegOfFreedom)    // rigth hand.
    Confidence interval: "estimate +- (tEstimate * sd)"", wher sd is standard deviation and tEstimante is the number of sd obtained from 'qt'.
    > qt(.975, numDegOfFreedom) * sd(varName)
--  F test for equality of variances:
    > var.test(variance1,variance2)

SAMPLING
====================================

--  To obtain 10 samples of 5 observations each from a normal distribution with means 1, 2, ...., 10:
    > map(1:10, rnorm, n=5)
--  To sample uniformly from a vector:
    > sample(23,5)  # sample five values among the integers 1 - 23.
    > sample(1:5, 5, replace = F)
    > sample(c("H","T"), 10, replace=T, prob=c(0.9, 0.1))   # Coin tossing with an unfair coin.

SIMULATIONS
====================================

--  To create 50 standard normal random observations with a mean of value1 and a standard deviation of value2:
    > rnorm(50,mean=value1,sd=value2)
--  To reproduce the exact same set of random numbers:
    > set.seed(numValue)
    > rnorm(50,mean=value1,sd=value2)
--  To simulate the distribution of the mean of 20 random numbers from the exponential distribution by repeating the operation 10 times:
    > replicate(10,mean(rexp(20)))
    > sapply(1:10, function(x) mean(rexp(20)))

--  To simulate 16 samples and their variances from a normal distribution and to plot them:
    > plot(c(0,32),c(0,15),type="n",xlab="Sample size",ylab="Variance")  // to draw the axis and the labels.
    > for (n in seq(3,31,2)) {
          for( i in 1:30){
            x <- rnorm(n,mean=10,sd=2)
            points(n,var(x))
          }
      }
