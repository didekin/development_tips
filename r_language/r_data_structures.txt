DATA BASES
====================================

MYSQL
-----

--  To install package on Mac:
    > install.packages("RMySQL")
--  To  connect to a server and database:
    > conn <- dbConnect(MySQL(),user="pedro",password="pedro",dbname="leben",host="localhost",client.flag=CLIENT_MULTI_RESULTS)
--  To avoid problems with UTF-8 encoding in mysql data base:
    > dbGetQuery(conn,"set names utf8")
--  To execute a query:
    > datasetName <- dbGetQuery(conn, queryTx1Str)
--  To close the connection:
    > dbDisconnect(conn)

--  To see data in a spreadsheet window:
    > View(datasetName)
    > fix(datasetName)
--  To inspect the data:
    > dim(datasetName)
    > names(datasetName)
    > str(datasetName)

DATA FRAMES
====================================

--  To attach the variables names in a dataframe to the search path:
    > attach(dataframeName)
--  To remove a data frame from the search path:
    > detach(df_name)
--  To specify that a data frame should be searched (similar to attach):
    >  with(df_name, plot(var1, var2))

--  To create a data frame with the structure of another one:
    > empty_df = old_df[FALSE,]
--  To create an empty data frame just initialize it with empty vectors:
    > df <- data.frame(Date=as.Date(character()),
                 File=character(),
                 User=character(),
                 stringsAsFactors=FALSE)
--  To create a data frame from a matrix:
    > data.frame(matrixName)

--  To get a dataframe with a column of another:
    new_df <- old_df[columnNumber]
--  To create a dataFrame from a selection of rows of an old one:
    # Selecciona, para las filas que cumplen los criterios, todas las columnas.
    > newDataFrameName <- df_name[which(df_name$var1Name=="M" & df_name$var2Name > 30),]

--  To coerce a tibble to a data frame:
    as.data.frame(tibbleName)

--  To combine data frames:
    > bind_rows(...), bind_cols(...), combine(...)
--  To make the cartesian product of two data frames:
    > merge(., pg1_df, all.x = TRUE)

--  To delete columns from a data frame:
    > df[2] <- NULL
    > df[[2]] <- NULL
    > df <- df[,-2]
    > df <- df[-2]
    > df[1:2] <- list(NULL)
    > df[1:2] <- NULL

--  To get a simple table with a label and frequency count of occurrences in a column:
    > count(df_name, columnName)
--  To count the occurrences into equally spaced bins:
    > count(cut_width(variableName, 0.5))   # 0.5 is the space interval.
--  To count distinct occurrences in a column:
    > count(distinct(dfName, columnName))
--  To produce a numerical summary of each variable in a particular data set.
    > summary(mtcars)

--  To pull out a single variable (column)
    > dataframName[["variableName"]] or dataframName[[position]]
    > pull(dataFrame, var = ?)      # var may be a literal name, a positive or a negative integer.
    Inside a pipe, dataframe uses a placeholder '.':
    > .[["variableName"]] or .[[position]]


--  To get values of one column conditional on values on another:
    > mydataFrame <- data.frame(name = c(LETTERS[1:5]), values = c(6,7,8,9,2))
    > name[values > 7]  # gives: C D
    > mydataFrame[values > 7,]  # gives:   name values
                                             C      8
                                             D      9

--  To get a list of vectors grouping values in var2 by corresponding values in var1:
    > split(my_df$var2,my_df$var1)  # my_df <- data.frame(name = c("A","B","B","A","A"), value = c(3,2,1,4,5))
                                    # split(value, name)  gives $A
                                                                [1] 3 4 5
                                                                $B
                                                                [1] 2 1

--  To get first rows:
    > head(mydataFrame)
--  To get last rows:
    > tail(mydataFrame)
--  To get the index of the last column:
    > df[,ncol(df)]  // ncol(data)

--  To filter rows of a dataframe basedo on the values of one column/variable:
    > df_name_bis <- subset(df_name,var1 < 7)

--  To identify rows with EQUAL VALUES:
    > idx <- duplicated(df) | duplicated(df, fromLast = TRUE)
      df[idx, ]

-- To refer to non-standard column names, surround the name with backticks
    > provincia_taller_vdor = `Provincia Soldto`

--  To add a primery key to a dataframe:
    mutate(
        pk = row_number()
    )

--  To recode the value of a variable:
    > df_name$varName[df_name$varName == 99] <- NA
--  To discretise continuous variables:
    > cut(..)
--  To modify a dataframe:
    > df_name <- within(df_name,{
                                    log.gluc <- log(blood.glucose)
                                    m <- mean(log.gluc)
                                    centered.log.gluc <- log.gluc - m
                                    rm(m)
                                }
                        )
    Or:
    > df_name <- within(df_name,{
                                     newVarName <- NA
                                     newVarName[oldVarName > 75] <- "Elder"
                                     newVarName[oldVarName >= 55 & age <= 75] <- "Middle Aged"
                                     newVarNameoldVarName < 55] <- "Young"
                                     }
                                 )

--  To sum the values of a columns with a name condition:
    > rowSums(.[, str_detect(names(.), "pg1_.")])

--  To apply different summarizing functions to the variables in df:
    > promo_taller2_df <- list(
            # Lista1: variables para resumir.
            lst(
              grep("^pg1_",names(taller2_df),ignore.case = FALSE,perl = FALSE,value = TRUE),
              c("quarter_promo", "duracionDia", "tipo_incentivo")
            ),
            # Lista2: funciones para utilizar en el resumen. 'max' para el primer elemento de la Lista1, y 'first', para el segundo.
            lst(max, first)
      )%>%
      pmap(
        # Selecciono variables de campaña, no de taller.
        ~ taller2_df[, c(4:24)] %>%
          group_by(init_mes_envio, mercado) %>%
          # Pasamos Lista1 de variables como .x y Lista2 de funciones como .y.
          summarise_at(.x, .y)) %>%
          # Devuelve una lista de dataframes que fundo con la operación inner_join.
          reduce(inner_join, by = c("init_mes_envio", "mercado"))

FILES
====================================

LOAD
----

--  Para cargar los datos que vienen en la distribución estándar de R:
    > library(datasets)
    > data(iris)

--  To download a file:
    > fileUrl <- "https://...."
    > download.file(fileUrl, destfile = "./data/f.csv", method = "curl")

--  To load a CSV file
    > library(readr)
    > titular_old <- read_csv(
        "~/Documents/clientes/leben/demo_dic_2018/data/titular_old.csv",
        col_names = c(
        "titular_id","acumula_num_tx","acumula_ptos","pedido_num_tx","pedido_ptos","fraccion_disp","avg_redencion"
        ),
        col_types = cols(
        titular_id = col_integer(),
        acumula_num_tx = col_integer(),
        acumula_ptos = col_integer(),
        pedido_num_tx = col_integer(),
        pedido_ptos = col_integer(),
        fraccion_disp = col_double(),
        avg_redencion = col_integer()
        )
      )

--  To check the variable names of the loaded file:
    > names(fileName)

--  To load a "flat" file local:
    > read.table("path")

--  To  load an Excel file:
    > library(xlsx)
    > read.xlsx("path",sheetIndex=1,header=TRUE)

--  To  parse a remote JSON file:
    > library(jsonlite)
    > jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
--  To  write a data.frame to a JSON file:
    > myjson <- toJSON(iris, pretty=TRUE)
--  To  convert back to JSON:
    > iris2 <- fromJSON(myjson)

MANIPULATE
----------

--  To  read a file or a connection object:
    > readLines(connection,..)
--  To  count the number of characters in a line:
    > nchar(line)

LIST
====================================

--  To create an empty list:
    >  emptyList <- vector("list", length = 0)
--  To combine individual vectors into a listl:
    > mylist <- list(listElement1=vector1,listElement2=vector2)

--  '[' extracts a sub-list. The result will always be a list.
--  '[[' extracts a single component from a list. It removes a level of hierarchy from the list.
--  '$' is a shorthand for extracting named elements of a list. You don’t need to use quotes.

--  To remove a level hierarchy from a list:
    > purrr::flatten(x)
    > unlist(x)

MATRIX
====================================

--  To create a matrix:
    > A = matrix(1:10,nr=5,nc=2)
    By default R creates matrices by successively filling in columns:
    > x=matrix(c(1,2,3,4),2,2)   // a 2x2 matrix.
    1   3
    2   4
--  To create a matrix from a list filling by rows with a specified number of columns:
    > matrix(unlist(listName), ncol = numColumns, byrow = T)

--  To reorder the elements of a matrix in a different number of columns and rows:
    > dim(matrixName) <- c(numRows, numColumns)
--  To get the number of rows or columns:
    > nrow(dataset), ncol(dataset)
    Para dataframes y vectores, también: NCOL y NROW.
--  To assing row or column names using, for example, capital letters:
    > rownames(matrixName) <- LETTERS[1:3]     # letters A, B and C.

--  To select the element corresponding to the second row and the third column in a matrix:
    > A[2,3]
    > datasetName["2", "num_titulares"]
--  To select multiple rows and columns at a time,we provide vectors as the indices.
    > A[c(1,3),c(2,4)]
    > A[1:3,2:4]
    > A [1:2 ,]   // rows 1 and 2, all columns
    > A [ ,1:2]   // all rows, columns 1 and 2
    > datasetName[datasetName$tx_year == 2010, 2:5]

--  Para definir un índice negativo, se define un vector -c(..) con las posiciones a excluir.
    > A[-c(1,3),]
    > A[-c(1,3),-c(1,3,4)]  # All but rows 1 and 3, and columns 1,3, and 4.

OPERATIONS
----------

--  To sum, substract, multiply, divide or exponentiate two matrices element-wise:
    > A + B    > A - B   > A * B    > A / B    > A ^ B

--  Transpose: > t(A)
--  Matrix multiplication: > A %*% B
--  Outer product of two matrices of one column:
    > X %o% Y
--  Diagonals:
    > diag(A)
    > diag(c(1, 2, 3))              1    0    0
                                    0    2    0
                                    0    0    3
    > diag(3)  1    0    0
               0    1    0
               0    0    1

   https://datascienceplus.com/linear-algebra-in-r/


VECTOR
====================================

--  NULL is often used to represent the absence of a vector.
--  NA is used to represent the absence of a value in a vector.

--  To create a vector of doubles:
    > double(length = 2) j  # 0  0
--  To create vectors with sequence of numbers:
    > seq(0,1,length=10)   # 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 0.7777778 0.8888889 1.0000000
    > x = 0:2    # 0 1 2
--  To create a sequence with origin, end and the interval between adjacent values:
    > seq(2,10,3)  # 2 5 8
--  To concatenate two vectors x and y plus value 5:
    >  c(x, y, 5)
--  To create a vector with named components:
    > x <- c(red="Huey", blue="Dewey", green="Louie")
--  To see the names of the components:
    > names(x)
--  To create a vector replicating n times another vector x:
    > rep(x, n)
--  To create a vector replicating a variable number of times the components of another vector x:
    > rep(x, c(3,5))  # the number of components in x must be the number of components in the second vector.
    # rep(c("a","b"), c(2,5))  is "a" "a" "b" "b" "b" "b" "b"
    > rep(x, each = 5) or rep(x, c(5,5)

--  To concatenate all the values of a vector, separated by comma:
    > paste(vector, collapse = ",")

--  To glue vectors together, columnwise or rowwise:
    > cbind(v1Name,v2Name,v3Name)  or rbind(..
--  To add values to a vector at a certain position:
    > append(vector, values, after = 3)

--  Para definir un índice negativo, se define un vector -c(..) con las posiciones a excluir.
    > A[-c(1,3)]
    Similar:
    > x[c(-1, -3),]
    It’s an error to mix positive and negative values.

--  Subsetting with a logical vector keeps all values corresponding to a TRUE value:
    > x[x %% 2 == 0]  # All even (or missing!: NA) values of x
--  To subset a named vector:
    > x[c("colName1", "colNameX")]


OPERATIONS
----------

--  To check if all the values of one o more logical vectors are TRUE:
    > all(v1, v2, v3)
--  To calculate the product of a vector of numbers:
    > prod(40:36)
--  To divide a vector in an unknown number of chunks of size S:
    > split(vector, ceiling(seq_along(vector)/S))
--  To divide a vector in N chunks of unknown size:
    > split(vector, sort(vector%%N))

--  To sort the values of a vector:
    > sort(x, decreasing = FALSE, ...)



