--  The SPV node establishes the existence of a transaction in a block by requesting a merkle path proof and by validating the proof of work in the chain of blocks.
--  In response to a getdata message from the node, peers will send a merkleblock message that contains only block headers for blocks matching the filter and
    a merkle path (see Merkle Trees) for each matching transaction. The peer will then also send tx messages containing the transactions matched by the filter.
    ESTE ES EL PROCESO DE OBTENCIÓN DE LA INFORMACIÓN SOBRE TX QUE AFECTA A UN USUARIO.

--  Nodes that hear about a transaction put it in a pool of transactions which they’ve heard about but that aren’t on the block chain yet.

-   If a transaction’s inputs refer to a transaction that is not yet known, such as a missing parent, the orphan transaction will be stored temporarily
    in the orphan pool until the parent transaction arrives.
    When a transaction is added to the transaction pool, the orphan pool is checked for any orphans that reference this transaction’s outputs (its children).
    Any matching orphans are then validated. If valid, they are removed from the orphan pool and added to the transaction pool, completing the chain
    that started with the parent transaction. In light of the newly added transaction, which is no longer an orphan, the process is repeated
    recursively looking for any further descendants, until no more descendants are found. Through this process, the arrival of a parent
    transaction triggers a cascade reconstruction of an entire chain of interdependent transactions by re-uniting the orphans with their
    parents all the way down the chain.

--  Almost every node on the bitcoin network maintains a temporary list of unconfirmed transactions called the transaction pool. Nodes use this pool
    to keep track of transactions that are known to the network but are not yet included in the blockchain. As transactions are received and verified,
    they are added to the transaction pool and relayed to the neighboring nodes to propagate on the network.

    UTXO pool is the set of all unspent outputs on the blockchain.

    Whereas the transaction and orphan pools represent a single node’s local perspective and might vary significantly from node to node depending upon
    when the node was started or restarted, the UTXO pool represents the emergent consensus of the network and therefore will vary little between nodes.
    Furthermore, the transaction and orphan pools only contain unconfirmed transactions, while the UTXO pool only contains confirmed outputs.

--  Temporary pool of unverified transactions, before adding to blocks.

--  Why blocks: Basically, it’s an optimization:
    -   If miners had to come to consensus on each transaction individually, the rate at which new transactions could be accepted by the system
        would be much lower.
    -   A hash chain of blocks is much shorter than a hash chain of transactions would be, since a large number of transactions can be put into each block.
        This will make it much more efficient to verify the block chain data structure.

--  The block chain is a combination of two different hash-based data structures:
    -   A hash chain of blocks.
    -   A per-block tree of all of the transactions that are included in that block. This is a Merkle tree and allows
        us to have a digest of all the transactions in the block in an efficient way.
    -   Each block has a block header, a hash pointer to the TX tree, and a hash pointer to the previous block
        in the sequence.
        Los headers de los bloques han de llevar datos que minimicen la búsqueda por comunidad, proveedor, usuario ADM, fecha, ...

--  Each block within the blockchain is identified by a hash, generated using the SHA256 cryptographic hash algorithm on the header of the block.
    Each block also references a previous block, known as the parent block, through the "previous block hash" field in the block header.
    The sequence of hashes linking each block to its parent creates a chain going back all the way to the first block ever created, known as the GENESIS block.
    The "previous block hash" field is inside the block header and thereby affects the current block’s hash.

    Although a block has just one parent, it can temporarily have multiple children. Each of the children refers to the same block as its parent and
    contains the same hash in the "previous block hash" field. Multiple children arise during a blockchain FORK, a temporary situation
    that occurs when different blocks are discovered almost simultaneously by different miners. Eventually, only one child block
    becomes part of the blockchain and the "fork" is resolved.

--  The primary identifier of a block is its cryptographic hash, a digital fingerprint, made by hashing the block header twice through the SHA256 algorithm.
    The resulting 32-byte hash is called the block hash but is more accurately the block header hash, because only the block header is used to compute it.
--  The independent validation of each new block by every node on the network ensures that the miners can’t cheat.
--  Nodes maintain three sets of blocks:
    -   those connected to the main blockchain.
    -   those that form branches off the main blockchain (secondary chains).
    -   blocks that do not have a known parent in the known chains (orphans).

--  Blocks include a hash pointer to the previous block that they’re extending. Transactions include one or more hash pointers to previous
    transaction outputs that are being redeemed.
    The (block) pointer is just a string in this context as it need not tell us where to find this block. We will find the block by asking other peers on the
    network for it. The important part is the hash that both acts as an ID when requesting other peers for the block (hashing it and comparing with its hash)
    and lets us validate the block once we have obtained it.
