META LANGUAGE
=============

--  Meta.parse takes a string and transforms it into an expression:
    > expr = Meta.parse("1+2*3")
--  Core.eval evaluates an expression:
    > Core.eval(expr)

MACRO EXAMPLES
==============

--  @edit functionName  // Show the source code of the function.

--  Interact: @manipulate
    > @manipulate for i in 1:10
        i
      end

--  @show       // Show an expression and result, returning the result
    > @show x1 x2

--  @view

--  @which expressionWithFunction  // Show the particular method used of the function in the expresssion.
    Ex: @which @which im * 2im  // Show *(z::Complex, w::Complex) in Base at complex.jl:277

PACKAGES
========

--  To add a package:
    > Pkg.add(["LinearAlgebra", "Clustering"])
    
--  To use a package in a script (written at the beginning):
    - using LinearAlgebra, SparseArrays, VMLS
    - (Or) import LinearAlgebra (in this case, functions must be called with:) LinearAlgebra.myfunction
      - In this case, an alias for the package can be created with: const alg = LinearAlgebra.
        (Reference to the function:) alg.myfunction
      - To statically import a function:
        import LinearAlgebra: myFunction
        (And then:) myFunction() (without package name or alias)

--  Interact.jl for interactive visualization
--  JuMP.jl for constrained optimization
--  OffsetArrays.jl for arrays with arbitrary indexes (beginning in 0, p.e.)
--  SparseArrays.jl
--  VMLS.jl
    in REPL:  ] add https://github.com/VMLS-book/VMLS.jl
    > Pkg.add((url="https://github.com/VMLS-book/VMLS.jl") 


