EXPLORING
=========

--  To get column names
    > names(df)  #  2-element Array{Symbol,1}: "A" "B"
--  To get column names as Symbols use the propertynames function:
    > propertynames(df) #  2-element Array{Symbol,1}: :A :B
--  To see columns and rows:
    > show(df, allrows=true)
    > show(df, allcols=true)
--  First and last rows:
    > first(df, 6)
    > last(df, 10)
--  To see a subset:
    > @view df[12:15, :A]
--  Dimensions:
    > size(df); size(df,1) # rows ; size(df,2) #columns

--  To summarize data:
    > describe(df)
    > describe(df[!, [:A]))  # column A.

NAMES (for column names)

--  > Symbol(:_, "hola")  # :_hola
--  > Symbol("_", "hola")  # :_hola

SUBSETTING
==========

--  The colon : indicates that all items (rows or columns depending on its position) should be retained.

--  To get a COLUMN VECTOR from dataframe column A:
    > df.A    # 4-element Array{Int64,1}:
    > df."A"
    > df[!, :A]
    > df[!, 1]  # where 1 is the index for column A.
--  To get a copy of column A:
    > df[:, :A]
    > df[:, 1]

--  To get a DATAFRAME from dataframe:
    > df[!, [:A]]
    > df[!, [:colName1, :colName2]]
    > df[!, r"x"]  # column name contains "x"

--  Similar (but copying values):
    > df[1:3, :]
    > df[[1, 5, 10], :]
    > df[:, [:A, :B]]

--  To include a specific subset of columns with a regex:
    > df[:, All(r"x")]
--  To exclude
    > df[:, All(Not(r"A"))]
    > df[!, Not(:x1)]

--  To select rows based on conditions on variables:
    > df[df.A .> 500, :]
    > df[(df.A .> 500) .& (300 .< df.C .< 400), :]
    To match a specific subset of values (**IN**):
    > df[in.(df.A, Ref([1, 5, 601])), :]

--  To select in a new DataFrame with exclusion (**NOT**):
    > select(df, Not(:x1))
--  To select avoiding copying:
    > select(df, :x1, copycols=false)
--  Similarly, to perform the selection operation in-place:
    > select!(df, Not(:x1));

--  To rename a column:
    > rename!(df, (:Documento => :IdCliente))
--  To select and rename:
    > select(df, :colName1 => :a1, :colName2 => :a2)   # rename colName2

--  To select and transform:
    > select(df, :colName1, :colName2 => (x -> x .- minimum(x)) => :colName2)  # transform colName2: the minimum is by column.
    > select(df, :x2, :x2 => ByRow(sqrt))  # transform columns by row

TRANSFORMATION
==============

--  To transform a column variable in categorical:
    > df -> transform!(df, :varName => categorical => :varNameCateg)

--  transform and transform! functions work identically to select and select! with the only difference
    that they retain all columns that are present in the source data frame.

--  To move to the front all columns whose name match a regex:
    > df[:, All(r"x", :)]
--  To exclude:
    > df[:, All(Not(r"x"), :)]
--  To order rows:
    > sort!(df)

--  To generate a column that is a sum of all other columns in the data frame:
    > transform(df, All() => +)
--  To compute for each row the name of column with the highest score:
    > transform(df, AsTable(:) => ByRow(argmax) => :prediction)
--  To compute row-wise sum, number of elements, and mean, while ignoring missing values.
    > transform(df, AsTable(:) .=> ByRow.([sum∘skipmissing, x -> count(!ismissing, x), mean∘skipmissing]) .=> [:sum, :n, :mean])

--  To apply a function to EACH column of a DataFrame
    > combine(df, names(df) .=> sum)  # Attention to the '.' character

    1×2 DataFrame
│ Row │ A_sum │ B_sum   │
│     │ Int64 │ Float64 │
├─────┼───────┼─────────┤
│ 1   │ 10    │ 10.0    │

    > combine(df, names(df) .=> sum, names(df) .=> prod)

    1×4 DataFrame
│ Row │ A_sum │ B_sum   │ A_prod │ B_prod  │
│     │ Int64 │ Float64 │ Int64  │ Float64 │
├─────┼───────┼─────────┼────────┼─────────┤
│ 1   │ 10    │ 10.0    │ 24     │ 24.0    │

--  To replace values in a column:
    > replace!(df.a, "None" => "c")  # value "None" is replaced with "c" in column a.
--  To replace on multiple columns or on the whole data frame:
    > df[:, [:c, :d]] .= ifelse.(df[!, [:c, :d]] .== "None", "c", df[!, [:c, :d]])       # on a subset of columns [:c, :d]
--  In the entire DataFrame
    > df .= ifelse.(df .== "c", "None", df)     # using 'broadcast!' with the fuse operator '.='
