META LANGUAGE
=============

--  Meta.parse takes a string and transforms it into an expression:
    > expr = Meta.parse("1+2*3")
--  Core.eval evaluates an expression:
    > Core.eval(expr)

MACRO EXAMPLES
==============

--  @assert  // To evalutate (and throw exception) a boolean expression.
--  @code_llvm   // To view the code used by Julia in its backend.
--  @edit functionName  // Show the source code of the function.
--  @evalpoly   / Evaluate the polynomial âˆ‘ z^{k-1}*c[k] for the coefficients c[1], c[2] ...
--  @isdefined(s) -> Bool  //  Tests whether variable s is defined in the current scope.
--  @macroexpand // To view a macro as a set of symbols.

--  @show       // Show an expression and result, returning the result
    > @show x1 x2
--  @view
--  @which expressionWithFunction  // Show the particular method used of the function in the expresssion.
    Ex: @which im * 2im  // Show *(z::Complex, w::Complex) in Base at complex.jl:277

--  Interact.@manipulate
    > @manipulate for i in 1:10
        i
      end

